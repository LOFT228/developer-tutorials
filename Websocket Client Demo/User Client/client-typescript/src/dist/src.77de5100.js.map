{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"src.77de5100.js","sourceRoot":"..","sourcesContent":["//import express from 'express';\n//const app = express();\nconst port = 3000;\n\n/*\n    We use Express to get our app to run on localhost as a web application on the port declared above.\n*/\n\n/*\n        Root Directory must be an absolute path.\n\n        Specifying the root path is more useful when you're passing a user-generated file path which could potentially contain \n        malformed/malicious parts like .. (e.g. ../../../../../../etc/passwd). Setting the root path prevents such malicious \n        paths from being used to access files outside of that base path.\n*/\n\n/*\napp.get('/', (req, res) => {\n    let rootDir = '/Users/josephiacono/Desktop/Workspace/practice/Websocket Client Demo/User Client/client-typescript/'\n    res.sendFile('src/index.html', {root: rootDir});\n});\n\napp.listen(port, () => {\n   console.log(`Express is listening at http://localhost:${port}`);\n   console.log('Typescript application running...');\n   main();\n\n});\n\n*/\n\nvar ourAddress;\nvar targetAdress = 'DoJ5abm4DuKLYKZPgVTQpX39johCAVHRs5Fqe6AQVQRd.GpWGj6Vns57wBNPdq8kPqWxfVm8udomF5iw4VeAtdTpg@DfNMqQRy6pPkU8Z5rBsxRwzDUzAMXHPFwMhjF16ScZqn';\nvar connection;\n\nasync function main() {\n    var port = '1977' // client websocket listens on 1977 by default, change if yours is different\n    var localClientUrl = \"ws://127.0.0.1:\" + port;\n\n    let title = \"\";\n    if (typeof document !== \"undefined\") {\n        title = document.title;\n    }\n    console.log(title); // '' if in a Node.js environment\n\n    // Set up and handle websocket connection to our desktop client.\n    connection = await connectWebsocket(localClientUrl).then(function (c) {\n        return c;\n    }).catch(function (err) {\n        display(\"Websocket connection error. Is the client running with <pre>--connection-type WebSocket</pre> on port \" + port + \"?\");\n    })\n    connection.onmessage = function (e) {\n        handleResponse(e);\n    };\n\n    sendSelfAddressRequest();\n\n    // Set up the send button\n    const sendButton = document.querySelector('#send-button');\n\n    sendButton?.addEventListener('click', function handleClick(event) {\n        console.log('clicked send!')\n        sendMessageToMixnet();\n    });\n}\n\n// Handle any messages that come back down the websocket. \nfunction handleResponse(resp) {\n    // hacky workaround for receiving pushed 'text' messages,\n    // basically we can either receive proper server responses, i.e. 'error', 'send', 'selfAddress'\n    // or actual messages, without any framing, so they do not have 'type' field\n    try {\n        let response = JSON.parse(resp.data);\n        if (response.type == \"error\") {\n            displayJsonResponseWithoutReply(\"Server responded with error: \" + response.message);\n        } else if (response.type == \"selfAddress\") {\n            displayJsonResponseWithoutReply(response);\n            console.log(response);\n            ourAddress = response.address;\n            console.log('address is:');\n            console.log(ourAddress);\n            display(\"Our address is:  \" + ourAddress + \", we will now send messages to ourself.\");\n        } else if (response.type == \"received\") {\n            handleReceivedTextMessage(response)\n        }\n    } catch (_) {\n        displayJsonResponseWithoutReply(resp.data)\n    }\n}\n\n\nfunction handleReceivedTextMessage(message) {\n    console.log(\"received a message!\")\n    const text = message.message\n    const replySurb = message.replySurb\n\n    if (replySurb != null) {\n        displayJsonResponseWithReply(text, replySurb)\n    } else {\n        displayJsonResponseWithoutReply(text)\n    }\n}\n\n// Send a message to the mixnet. \nfunction sendMessageToMixnet() {\n\n    var sendText = (<HTMLInputElement>document.getElementById(\"sendtext\")).value;\n\n    //const sendText = document.getElementById(\"sendtext\").value;\n    //const surbCheckbox = document.querySelector('#with-surb');\n\n    const message = {\n        type: \"send\",\n        message: sendText,\n        recipient: ourAddress,\n        withReplySurb: false,\n    }\n\n    //recipient: targetAdress\n\n    displayJsonResponseWithoutReply(message);\n    connection.send(JSON.stringify(message));\n}\n\nfunction sendReplyMessageToMixnet(messageContent, replySurb) {\n    const message = {\n        type: \"reply\",\n        message: messageContent,\n        replySurb: replySurb,\n    }\n\n    displayJsonResponseWithoutReply(message);\n    connection.send(JSON.stringify(message));\n}\n\n// Send a message to the mixnet client, asking what our own address is. \n// In this simplistic demo, we'll just use our own address to send ourselves messages. \n//\n// In a real application, you might want to ensure that somebody else got your\n// address so that they could send messages to you. \nfunction sendSelfAddressRequest() {\n    var selfAddress = {\n        type: \"selfAddress\"\n    }\n    displayJsonSend(selfAddress);\n    connection.send(JSON.stringify(selfAddress));\n}\n\nfunction display(message) {\n    document.getElementById(\"output\").innerHTML += \"<p>\" + message + \"</p >\";\n}\n\nfunction displayJsonSend(message) {\n    let sendDiv = document.createElement(\"div\")\n    let paragraph = document.createElement(\"p\")\n    paragraph.setAttribute('style', 'color: blue')\n    let paragraphContent = document.createTextNode(\"sent >>> \" + JSON.stringify(message))\n    paragraph.appendChild(paragraphContent)\n\n    sendDiv.appendChild(paragraph)\n    document.getElementById(\"output\").appendChild(sendDiv)\n}\n\nfunction displayJsonResponseWithoutReply(message) {\n    let receivedDiv = document.createElement(\"div\")\n    let paragraph = document.createElement(\"p\")\n    paragraph.setAttribute('style', 'color: green')\n    let paragraphContent = document.createTextNode(\"received >>> \" + JSON.stringify(message) + \"(NO REPLY AVAILABLE)\")\n    paragraph.appendChild(paragraphContent)\n\n    receivedDiv.appendChild(paragraph)\n    document.getElementById(\"output\").appendChild(receivedDiv)\n}\n\nfunction displayJsonResponseWithReply(message, replySurb) {\n    let replyBox = document.createElement(\"input\")\n    replyBox.setAttribute('type', 'text');\n    replyBox.setAttribute('value', 'type your anonymous reply here!');\n    replyBox.setAttribute('size', '50');\n\n    let sendButton = document.createElement(\"button\")\n    let buttonText = document.createTextNode(\"Send\")\n    sendButton.appendChild(buttonText)\n\n    sendButton.onclick = () => {\n        sendReplyMessageToMixnet(replyBox.value, replySurb)\n    }\n\n    let receivedDiv = document.createElement(\"div\")\n    let paragraph = document.createElement(\"p\")\n    paragraph.setAttribute('style', 'color: green')\n    let paragraphContent = document.createTextNode(\"received >>> \" + JSON.stringify(message) + \"(HERE BE SURB)\")\n    paragraph.appendChild(paragraphContent)\n\n    receivedDiv.appendChild(paragraph)\n    receivedDiv.appendChild(replyBox)\n    receivedDiv.appendChild(sendButton)\n\n    document.getElementById(\"output\").appendChild(receivedDiv)\n}\n\n// Connect to a websocket. \nfunction connectWebsocket(url) {\n    return new Promise(function (resolve, reject) {\n        var server = new WebSocket(url);\n        console.log('connecting to Websocket Server (Nym Client)...')\n        console.log(server);\n        server.onopen = function () {\n            resolve(server);\n        };\n        server.onerror = function (err) {\n            reject(err);\n        };\n\n    });\n}\n\nmain();\n\n"]}